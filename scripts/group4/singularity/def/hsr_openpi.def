Bootstrap: docker
From: nvidia/cuda:12.2.2-devel-ubuntu22.04

%labels
    Author   Yunosuke Kuramitsu
    Version  1.0

%environment
    # Dockerfile の ENV を移植
    export LC_ALL=C.UTF-8
    export LANG=C.UTF-8
    export MUJOCO_GL="egl"
    export PATH="/root/.local/bin:$HOME/.local/bin:$PATH"
    export PATH="/workspace/bin:$PATH"
    export NVIDIA_DRIVER_CAPABILITIES=all
    export DEBIAN_FRONTEND=noninteractive

%files
    ./nvidia/10_nvidia.json 10_nvidia.json
    ./nvidia/nvidia_icd.json nvidia_icd.json
    ./nvidia/nvidia_layers.json nvidia_layers.json

%post
    # Copy NVIDIA configs
    mkdir -p /usr/share/glvnd/egl_vendor.d
    mkdir -p /usr/share/vulkan/icd.d
    mkdir -p /etc/vulkan/implicit_layer.d

    cp 10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json
    cp nvidia_icd.json /usr/share/vulkan/icd.d/nvidia_icd.json
    cp nvidia_layers.json /etc/vulkan/implicit_layer.d/nvidia_layers.json

    # --- 基本ツール・Python インストール (RUN apt install …) ---
    apt update && apt install -y --no-install-recommends \
        build-essential cmake \
        git git-lfs openssh-client \
        nano vim less util-linux tree \
        htop atop nvtop \
        sed gawk grep curl wget zip unzip \
        tcpdump sysstat screen tmux \
        libusb-1.0-0-dev libglib2.0-0 libgl1-mesa-glx libegl1-mesa \
        speech-dispatcher portaudio19-dev libgeos-dev \
        python3.10 python3.10-venv python3-pip \
        libvulkan1 libvulkan-dev vulkan-tools  xvfb ffmpeg libavcodec-dev libavutil-dev libavformat-dev libpython3.11\
    && apt-get clean && rm -rf /var/lib/apt/lists/*

    # --- ffmpeg ビルド依存関係 (RUN apt install …) ---
    apt update && apt install -y --no-install-recommends \
        autoconf automake yasm \
        libass-dev \
        libfreetype6-dev \
        libgnutls28-dev \
        libunistring-dev \
        libmp3lame-dev \
        libtool \
        libvorbis-dev \
        meson \
        ninja-build \
        pkg-config \
        texinfo \
        zlib1g-dev \
        nasm \
        libx264-dev \
        libx265-dev libnuma-dev \
        libvpx-dev \
        libfdk-aac-dev \
        libopus-dev \
        libsvtav1-dev libsvtav1enc-dev libsvtav1dec-dev \
        libdav1d-dev \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

    # --- GitHub CLI インストール (RUN …wget→apt install gh) ---
    command -v wget >/dev/null || (apt update && apt-get install -y wget)
    mkdir -p -m 755 /etc/apt/keyrings
    wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg \
      | tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null
    chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] \
      https://cli.github.com/packages stable main" \
      | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
    # apt update && apt install -y gh
    apt update && apt --fix-broken install -y && apt install -y gh
    apt-get clean && rm -rf /var/lib/apt/lists/*

    # --- Python シンボリックリンク作成 (RUN ln -s) ---
    ln -s /usr/bin/python3 /usr/bin/python

    # --- Poetry インストール・設定 (RUN curl → poetry config) ---
    curl -sSL https://install.python-poetry.org | python - --version 1.8.5
    export PATH="/root/.local/bin:$PATH"
    poetry config virtualenvs.create false
    poetry config virtualenvs.in-project true

    # --- uv インストール (RUN wget … install.sh) ---
    mkdir -p /workspace/bin
    export XDG_BIN_HOME=/workspace/bin
    wget -qO- https://astral.sh/uv/install.sh | sh
    export PATH="/root/.local/bin:$PATH"

    # --- Qt 開発ツール (RUN apt install qtbase5-dev …) ---
    apt update && apt install -y --no-install-recommends \
        qtbase5-dev qtchooser qt5-qmake qtbase5-dev-tools \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

    # --- helper scripts をコンテナにコピー (COPY + chmod + chown) ---
    # mkdir -p /root/scripts
    # cp -r /workspace/docker/scripts/. /root/scripts/
    # chmod -R +x /root/scripts/*
    # cp /workspace/docker/scripts/.bashrc /home/
    # chown 1000:1000 /home/.bashrc
    # chown -R 1000:1000 /home

    # --- カラープロンプト強制 (RUN sed …) ---
    sed -i 's/#force_color_prompt=yes/force_color_prompt=yes/' /root/.bashrc

    export DEBIAN_FRONTEND=noninteractive

    # 問題回避用にパーミッション用意
    mkdir -p /var/cache/apt/archives/partial
    mkdir -p /var/lib/apt/lists/auxfiles
    mkdir -p /var/log/apt
    touch /var/log/apt/term.log
    chmod -R 755 /var/cache/apt /var/lib/apt/lists /var/log/apt

    # dpkg 修復（もし破損状態になっていたら）
    dpkg --configure -a || true
    apt-get install -f -y || true
        
    

%runscript
    # デフォルト起動時に /bin/bash を入れる
    exec /bin/bash "$@"
